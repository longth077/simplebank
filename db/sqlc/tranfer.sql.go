// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: tranfer.sql

package db

import (
	"context"
)

const createTranfer = `-- name: CreateTranfer :one
INSERT INTO tranfers (
  from_account_id, to_account_id, ammount
) VALUES (
  $1, $2, $3
)
RETURNING id, from_account_id, to_account_id, ammount, created_at
`

type CreateTranferParams struct {
	FromAccountID int64 `json:"from_account_id"`
	ToAccountID   int64 `json:"to_account_id"`
	Ammount       int64 `json:"ammount"`
}

func (q *Queries) CreateTranfer(ctx context.Context, arg CreateTranferParams) (Tranfer, error) {
	row := q.db.QueryRowContext(ctx, createTranfer, arg.FromAccountID, arg.ToAccountID, arg.Ammount)
	var i Tranfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Ammount,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTranfer = `-- name: DeleteTranfer :exec
DELETE FROM tranfers WHERE id = $1
`

func (q *Queries) DeleteTranfer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTranfer, id)
	return err
}

const getTranfer = `-- name: GetTranfer :one
SELECT id, from_account_id, to_account_id, ammount, created_at FROM tranfers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTranfer(ctx context.Context, id int64) (Tranfer, error) {
	row := q.db.QueryRowContext(ctx, getTranfer, id)
	var i Tranfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Ammount,
		&i.CreatedAt,
	)
	return i, err
}

const listTranfers = `-- name: ListTranfers :many
SELECT id, from_account_id, to_account_id, ammount, created_at FROM tranfers
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTranfersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTranfers(ctx context.Context, arg ListTranfersParams) ([]Tranfer, error) {
	rows, err := q.db.QueryContext(ctx, listTranfers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tranfer{}
	for rows.Next() {
		var i Tranfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Ammount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTranfer = `-- name: UpdateTranfer :one
UPDATE tranfers 
SET ammount = $2
WHERE id = $1
RETURNING id, from_account_id, to_account_id, ammount, created_at
`

type UpdateTranferParams struct {
	ID      int64 `json:"id"`
	Ammount int64 `json:"ammount"`
}

func (q *Queries) UpdateTranfer(ctx context.Context, arg UpdateTranferParams) (Tranfer, error) {
	row := q.db.QueryRowContext(ctx, updateTranfer, arg.ID, arg.Ammount)
	var i Tranfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Ammount,
		&i.CreatedAt,
	)
	return i, err
}
